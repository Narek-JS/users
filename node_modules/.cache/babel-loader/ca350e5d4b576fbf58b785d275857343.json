{"ast":null,"code":"var _jsxFileName = \"/home/narek/Desktop/clonedUsersFromGithub/src/components/UsersWrapper/index.js\",\n    _s = $RefreshSig$();\n\nimport { useEffect, useMemo, useState } from \"react\";\nimport { useHistory, useLocation } from \"react-router\";\nimport { User } from \"..\";\nimport { getUsers } from \"../../services\";\nimport { filteredData, replaceText, addUsersImg } from \"../../utils\";\nimport { jsxDEV as _jsxDEV } from \"react/jsx-dev-runtime\";\nimport { Fragment as _Fragment } from \"react/jsx-dev-runtime\";\n\nconst UsersWrapper = () => {\n  _s();\n\n  const [users, setUsers] = useState({\n    data: [],\n    loading: false\n  });\n  const [value, setValue] = useState('');\n  const {\n    search\n  } = useLocation();\n  const history = useHistory();\n  useEffect(() => {\n    setUsers({ ...users,\n      loading: true\n    });\n    getUsers('/users').then(response => {\n      const users = addUsersImg(response.data);\n      setUsers({\n        data: users,\n        loading: false\n      });\n    });\n  }, []);\n  const filteredUsers = useMemo(() => {\n    const index = search.indexOf('=') + 1;\n    const changedValue = replaceText(search.slice(index), '+', ' ');\n    setValue(changedValue);\n    return filteredData(users.data, value, 'users');\n  }, [users, value]);\n\n  const changeValue = event => {\n    const value = replaceText(event.target.value, ' ', \"+\");\n    history.replace({\n      search: `?value=${value}`\n    });\n    setValue(event.target.value);\n  };\n\n  return users.loading ? /*#__PURE__*/_jsxDEV(\"h1\", {\n    children: \"loading\"\n  }, void 0, false, {\n    fileName: _jsxFileName,\n    lineNumber: 36,\n    columnNumber: 17\n  }, this) : /*#__PURE__*/_jsxDEV(_Fragment, {\n    children: [/*#__PURE__*/_jsxDEV(\"input\", {\n      onChange: changeValue,\n      value: value\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 38,\n      columnNumber: 25\n    }, this), /*#__PURE__*/_jsxDEV(\"div\", {\n      className: \"users\",\n      children: filteredUsers.map(user => /*#__PURE__*/_jsxDEV(User, {\n        user: user,\n        path: `user/${user.id}`\n      }, user.id, false, {\n        fileName: _jsxFileName,\n        lineNumber: 40,\n        columnNumber: 56\n      }, this))\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 39,\n      columnNumber: 25\n    }, this)]\n  }, void 0, true);\n};\n\n_s(UsersWrapper, \"BF+tVkTYlXi5CCjpoSEkRPBsgM8=\", false, function () {\n  return [useLocation, useHistory];\n});\n\n_c = UsersWrapper;\nexport { UsersWrapper };\n\nvar _c;\n\n$RefreshReg$(_c, \"UsersWrapper\");","map":{"version":3,"sources":["/home/narek/Desktop/clonedUsersFromGithub/src/components/UsersWrapper/index.js"],"names":["useEffect","useMemo","useState","useHistory","useLocation","User","getUsers","filteredData","replaceText","addUsersImg","UsersWrapper","users","setUsers","data","loading","value","setValue","search","history","then","response","filteredUsers","index","indexOf","changedValue","slice","changeValue","event","target","replace","map","user","id"],"mappings":";;;AAAA,SAASA,SAAT,EAAoBC,OAApB,EAA6BC,QAA7B,QAA6C,OAA7C;AACA,SAASC,UAAT,EAAqBC,WAArB,QAAwC,cAAxC;AACA,SAASC,IAAT,QAAqB,IAArB;AACA,SAASC,QAAT,QAAyB,gBAAzB;AACA,SAASC,YAAT,EAAuBC,WAAvB,EAAoCC,WAApC,QAAuD,aAAvD;;;;AAGA,MAAMC,YAAY,GAAG,MAAM;AAAA;;AACvB,QAAM,CAAEC,KAAF,EAASC,QAAT,IAAsBV,QAAQ,CAAC;AAACW,IAAAA,IAAI,EAAE,EAAP;AAAWC,IAAAA,OAAO,EAAE;AAApB,GAAD,CAApC;AACA,QAAM,CAAEC,KAAF,EAASC,QAAT,IAAsBd,QAAQ,CAAC,EAAD,CAApC;AACA,QAAM;AAAEe,IAAAA;AAAF,MAAab,WAAW,EAA9B;AACA,QAAMc,OAAO,GAAGf,UAAU,EAA1B;AAEAH,EAAAA,SAAS,CAAC,MAAM;AACZY,IAAAA,QAAQ,CAAC,EAAC,GAAGD,KAAJ;AAAWG,MAAAA,OAAO,EAAE;AAApB,KAAD,CAAR;AACAR,IAAAA,QAAQ,CAAC,QAAD,CAAR,CAAmBa,IAAnB,CAAyBC,QAAD,IAAc;AAClC,YAAMT,KAAK,GAAGF,WAAW,CAACW,QAAQ,CAACP,IAAV,CAAzB;AACAD,MAAAA,QAAQ,CAAC;AAACC,QAAAA,IAAI,EAAEF,KAAP;AAAcG,QAAAA,OAAO,EAAC;AAAtB,OAAD,CAAR;AACH,KAHD;AAIH,GANQ,EAMN,EANM,CAAT;AAQA,QAAMO,aAAa,GAAGpB,OAAO,CAAC,MAAM;AAChC,UAAMqB,KAAK,GAAGL,MAAM,CAACM,OAAP,CAAe,GAAf,IAAsB,CAApC;AACA,UAAMC,YAAY,GAAGhB,WAAW,CAACS,MAAM,CAACQ,KAAP,CAAaH,KAAb,CAAD,EAAsB,GAAtB,EAA2B,GAA3B,CAAhC;AACAN,IAAAA,QAAQ,CAACQ,YAAD,CAAR;AACA,WAAOjB,YAAY,CAACI,KAAK,CAACE,IAAP,EAAaE,KAAb,EAAoB,OAApB,CAAnB;AACH,GAL4B,EAK1B,CAACJ,KAAD,EAAQI,KAAR,CAL0B,CAA7B;;AAOA,QAAMW,WAAW,GAAIC,KAAD,IAAW;AAC3B,UAAMZ,KAAK,GAAGP,WAAW,CAACmB,KAAK,CAACC,MAAN,CAAab,KAAd,EAAqB,GAArB,EAA0B,GAA1B,CAAzB;AACAG,IAAAA,OAAO,CAACW,OAAR,CAAgB;AAAEZ,MAAAA,MAAM,EAAG,UAASF,KAAM;AAA1B,KAAhB;AACAC,IAAAA,QAAQ,CAACW,KAAK,CAACC,MAAN,CAAab,KAAd,CAAR;AACH,GAJD;;AAMA,SAAOJ,KAAK,CAACG,OAAN,gBACK;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,UADL,gBAES;AAAA,4BACI;AAAO,MAAA,QAAQ,EAAEY,WAAjB;AAA8B,MAAA,KAAK,EAAEX;AAArC;AAAA;AAAA;AAAA;AAAA,YADJ,eAEI;AAAK,MAAA,SAAS,EAAC,OAAf;AAAA,gBACKM,aAAa,CAACS,GAAd,CAAkBC,IAAI,iBAAI,QAAC,IAAD;AAAM,QAAA,IAAI,EAAEA,IAAZ;AAAkB,QAAA,IAAI,EAAG,QAAOA,IAAI,CAACC,EAAG;AAAxC,SAAgDD,IAAI,CAACC,EAArD;AAAA;AAAA;AAAA;AAAA,cAA1B;AADL;AAAA;AAAA;AAAA;AAAA,YAFJ;AAAA,kBAFhB;AAQH,CAnCD;;GAAMtB,Y;UAGiBN,W,EACHD,U;;;KAJdO,Y;AAqCN,SAASA,YAAT","sourcesContent":["import { useEffect, useMemo, useState } from \"react\";\nimport { useHistory, useLocation } from \"react-router\";\nimport { User } from \"..\";\nimport { getUsers } from \"../../services\";\nimport { filteredData, replaceText, addUsersImg } from \"../../utils\"; \n\n\nconst UsersWrapper = () => {\n    const [ users, setUsers ] = useState({data: [], loading: false });\n    const [ value, setValue ] = useState('');\n    const { search } = useLocation();\n    const history = useHistory();\n\n    useEffect(() => {\n        setUsers({...users, loading: true});\n        getUsers('/users').then((response) => {\n            const users = addUsersImg(response.data);\n            setUsers({data: users, loading:false});\n        });\n    }, []);\n \n    const filteredUsers = useMemo(() => {  \n        const index = search.indexOf('=') + 1;\n        const changedValue = replaceText(search.slice(index), '+', ' ');\n        setValue(changedValue);\n        return filteredData(users.data, value, 'users');\n    }, [users, value]);\n    \n    const changeValue = (event) => {\n        const value = replaceText(event.target.value, ' ', \"+\");\n        history.replace({ search: `?value=${value}` });\n        setValue(event.target.value);\n    };\n    \n    return users.loading ? \n                <h1>loading</h1> :\n                    <>\n                        <input onChange={changeValue} value={value}/>\n                        <div className='users'>\n                            {filteredUsers.map(user => <User user={user} path={`user/${user.id}`} key={user.id}/>)}\n                        </div> \n                    </>\n};\n\nexport { UsersWrapper }; "]},"metadata":{},"sourceType":"module"}