{"ast":null,"code":"var _jsxFileName = \"/home/narek/Desktop/clonedUsersFromGithub/src/components/Posts/index.js\",\n    _s = $RefreshSig$();\n\nimport { useEffect, useMemo, useState } from \"react\";\nimport { useHistory, useLocation, useParams } from \"react-router\";\nimport { getPosts } from \"../../services\";\nimport { filteredData, replaceText } from \"../../utils\";\nimport classes from \"./style.module.css\";\nimport { jsxDEV as _jsxDEV } from \"react/jsx-dev-runtime\";\n\nconst Posts = () => {\n  _s();\n\n  const [posts, setPosts] = useState({\n    data: [],\n    loading: false\n  });\n  const [value, setValue] = useState('');\n  const {\n    id\n  } = useParams();\n  const params = useParams();\n  const {\n    search\n  } = useLocation();\n  const history = useHistory();\n  useEffect(() => {\n    setPosts({ ...posts,\n      loading: true\n    });\n    getPosts(`/posts`).then(response => {\n      const filteredPosts = response.data.filter(post => post.userId === +id);\n      setPosts({\n        data: filteredPosts,\n        loading: false\n      });\n    });\n  }, []);\n  const filteredPosts = useMemo(() => {\n    const index = search.indexOf('=') + 1;\n    const changedValue = replaceText(search.slice(index), '+', ' ');\n    setValue(changedValue);\n    return filteredData(posts.data, value, 'posts');\n  }, [value, posts]);\n\n  const changeValue = event => {\n    const value = replaceText(event.target.value, ' ', '+');\n    history.replace({\n      search: `?value=${value}`\n    });\n    setValue(event.target.value);\n  };\n\n  return posts.loading ? /*#__PURE__*/_jsxDEV(\"h1\", {\n    children: \"loading\"\n  }, void 0, false, {\n    fileName: _jsxFileName,\n    lineNumber: 39,\n    columnNumber: 17\n  }, this) : /*#__PURE__*/_jsxDEV(\"div\", {\n    className: classes.posts,\n    children: [/*#__PURE__*/_jsxDEV(\"input\", {\n      onChange: changeValue,\n      value: value\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 41,\n      columnNumber: 21\n    }, this), filteredPosts.map(post => {\n      return /*#__PURE__*/_jsxDEV(\"div\", {\n        className: classes.post,\n        children: [/*#__PURE__*/_jsxDEV(\"h2\", {\n          className: classes.title,\n          children: post.title\n        }, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 46,\n          columnNumber: 37\n        }, this), /*#__PURE__*/_jsxDEV(\"h4\", {\n          className: classes.body,\n          children: post.body\n        }, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 47,\n          columnNumber: 37\n        }, this)]\n      }, post.id, true, {\n        fileName: _jsxFileName,\n        lineNumber: 45,\n        columnNumber: 33\n      }, this);\n    })]\n  }, void 0, true, {\n    fileName: _jsxFileName,\n    lineNumber: 40,\n    columnNumber: 17\n  }, this);\n};\n\n_s(Posts, \"vOXyotyjaHKiSd41LPwIMJu7jQk=\", false, function () {\n  return [useParams, useParams, useLocation, useHistory];\n});\n\n_c = Posts;\nexport { Posts };\n\nvar _c;\n\n$RefreshReg$(_c, \"Posts\");","map":{"version":3,"sources":["/home/narek/Desktop/clonedUsersFromGithub/src/components/Posts/index.js"],"names":["useEffect","useMemo","useState","useHistory","useLocation","useParams","getPosts","filteredData","replaceText","classes","Posts","posts","setPosts","data","loading","value","setValue","id","params","search","history","then","response","filteredPosts","filter","post","userId","index","indexOf","changedValue","slice","changeValue","event","target","replace","map","title","body"],"mappings":"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","sourcesContent":["\nimport { useEffect, useMemo, useState } from \"react\";\nimport { useHistory, useLocation, useParams } from \"react-router\";\nimport { getPosts } from \"../../services\";\nimport { filteredData, replaceText } from \"../../utils\";\nimport classes from \"./style.module.css\";\n\nconst Posts = () => {\n    const [ posts, setPosts ] = useState({data: [], loading: false});\n    const [ value, setValue ] = useState('');\n    const { id } = useParams();\n    const params = useParams();\n    const { search } = useLocation();\n    const history = useHistory();\n\n    useEffect(() => {\n        setPosts({...posts, loading: true});\n        getPosts(`/posts`).then(response => {\n            const filteredPosts = response.data.filter(post => post.userId === +id);\n            setPosts({data: filteredPosts, loading: false});\n        });\n    }, []);\n\n    const filteredPosts = useMemo(() => {\n        const index = search.indexOf('=') + 1;\n        const changedValue = replaceText(search.slice(index), '+', ' ');\n        setValue(changedValue);\n        return filteredData(posts.data, value, 'posts');\n    }, [value, posts]);\n\n    const changeValue = (event) => {\n        const value = replaceText(event.target.value, ' ', '+');\n        \n        history.replace({ search: `?value=${value}` });\n        setValue(event.target.value);\n    };\n\n    return  posts.loading ?\n                <h1>loading</h1> : \n                <div className={classes.posts}>\n                    <input onChange={changeValue} value={value}/>\n                    {  \n                        filteredPosts.map(post => {\n                            return (\n                                <div className={classes.post} key={post.id}>\n                                    <h2 className={classes.title}>{post.title}</h2>\n                                    <h4 className={classes.body}>{post.body}</h4>\n                                </div>\n                            );\n                        })\n                    }\n                </div>\n};\n\nexport { Posts }; "]},"metadata":{},"sourceType":"module"}